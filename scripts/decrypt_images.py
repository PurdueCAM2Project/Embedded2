import argparse
import getpass
import json
import os

from src.jetson.AES import Encryption

"""
After having collect_images has run and the output folder has been downloaded,
decrypt the associated images.
This file is assumed to be on the end user's machine.
"""

# the metadata file generated by collect_images
METADATA_FILE = 'metadata.json'


def decrypt_images(dir):
    # ask for decryption key
    decrypt_key = getpass.getpass('Decryption password: ')

    # convert to PKBDF2 or whatever

    # make decryptor; probably changes once Jason finishes
    decryptor = Encryption

    with open(os.path.join(dir, METADATA_FILE)) as meta_file:
        metadata = json.load(meta_file)
        # use face coords to find where to decrypt in video frame
        for image in metadata:
            # TODO handle multiple faces in one frame. append to coords list
            coords = [(image['x_min'], image['y_min'], image['x_max'], image['y_max'])]
            init_vector = image['init_vector']
            # overwrite encrypted image


if __name__ == "__main__":
    parser = argparse.ArgumentParser('Decrypt images.')
    parser.add_argument('--directory', '-d', type=str, required=True, help='Folder of images to be decrypted.')
    args = parser.parse_args()

    decrypt_images(args.directory)
